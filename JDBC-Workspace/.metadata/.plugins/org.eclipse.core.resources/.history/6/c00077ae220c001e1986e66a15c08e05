package com.kh.common;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

public class JDBCTemplate {
	
	/*
	 * JDBC 과정 중 반복적으로 쓰이는 구문들을 각각의 메서드로 정의해둘 곳
	 * "재사용" 목적으로 공통 템플릿 작업을 진행
	 * 
	 * 클래스에서의 모든 메서드는 STATIC메서드로 만듬
	 *  
	 */

	// 공통부분 뽑아내기
	// 1. DB와 접속된 Connection 객체 생성 후 반환 메서드
	public static Connection getConnection() {
		
		// Connection 객체를 담을 그릇 생성
		Connection conn = null;
		
		try {
			// 연결시키기 => 1,2번 과정 진행
			Class.forName("oracle.jdbc.driver.OracleDriver");
			
			conn = DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:xe",
					"JDBC","JDBC");
			
		} catch (ClassNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		// Connection 객체 반환
		return conn;
	}
	
	// 2. 전달받은 JDBC용 객체를 반납시켜주는 메서드(객체별로)
	// 2-1) Connection객체를 전달받아서 반납시켜주는 메서드
	public static void close(Connection conn) {
		
		try {
			if(conn != null && !conn.isClosed()) {
				conn.close();
			}
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	// 2-2) Statement 객체를 전달받아서 반납시켜주는 메서드(오버로딩 적용)
	// 	    => 다형성으로 인해 PreparedStatement 객체 또한 매개변수로 전달이 가능(UpCasting)
	public static void close(Statement stmt) {
		
		try {
			if(stmt != null && !stmt.isClosed()) {
				stmt.close();
			}
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	// 2-3) ResultSet 객체를 전달받아서 반납시켜주는 메서드(오버로딩 적용)
	public static void close(ResultSet rset) {
		
		try {
			if(rset != null && !rset.isClosed()) {
				rset.close();
			}
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	// 3. 전달받은 Connection 객체를 가지고 트랜잭션 처리를 해주는 메서드
	// 3-1) Commit메서드
	public static void commit(Connection conn) {
		
		try {
			if(conn != null && conn.isClosed()) conn.commit();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	// 3-2) Rollback메서드
	public static void rollback(Connection conn) {
		
		try {
			if(conn != null && conn.isClosed()) conn.rollback();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
}
